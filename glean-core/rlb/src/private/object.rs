// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

use std::marker::PhantomData;

use glean_core::traits;

use crate::ErrorType;

// We need to wrap the glean-core type: otherwise if we try to implement
// the trait for the metric in `glean_core::metrics` we hit error[E0117]:
// only traits defined in the current crate can be implemented for arbitrary
// types.

/// Developer-facing API for recording event metrics.
///
/// Instances of this class type are automatically generated by the parsers
/// at build time, allowing developers to record values that were previously
/// registered in the metrics.yaml file.
#[derive(Clone)]
pub struct ObjectMetric<K> {
    pub(crate) inner: glean_core::metrics::ObjectMetric,
    object_type: PhantomData<K>,
}

impl<K: traits::ObjectObject> ObjectMetric<K> {
    /// The public constructor used by automatically generated metrics.
    pub fn new(meta: glean_core::CommonMetricData) -> Self {
        let inner = glean_core::metrics::ObjectMetric::new(meta);
        Self {
            inner,
            object_type: PhantomData,
        }
    }

    /// Record a new event with a provided timestamp.
    ///
    /// It's the caller's responsibility to ensure the timestamp comes from the same clock source.
    /// Use [`glean::get_timestamp_ms`](crate::get_timestamp_ms) to get a valid timestamp.
    pub fn set(&self, object: K) {
        self.inner.set(object.into_serialized_object());
    }

    /// todo
    pub fn set_str(&self, object: String) {
        let data = match serde_json::from_str(&object) {
            Ok(data) => data,
            Err(_) => {
                self.inner.record_invalid_value();
                return;
            }
        };
        self.set(data)
    }

    /// todo
    pub fn test_get_value<'a, S: Into<Option<&'a str>>>(&self, ping_name: S) -> Option<String> {
        let ping_name = ping_name.into().map(|s| s.to_string());
        self.inner.test_get_value(ping_name)
    }

    /// todo
    pub fn test_get_num_recorded_errors(&self, error: ErrorType) -> i32 {
        self.inner.test_get_num_recorded_errors(error)
    }
}
